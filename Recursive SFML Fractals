/****************************************************************
File: Recursive Fractals SFML
Description: Using Recursion to draw Fractals in SFML
Author: Joe Wood & Gerry Blackmon
Class: CSCI 120
Date: 04/13/18
I hereby certify that this program is entirely my own work.
*****************************************************************/

#include <SFML/Graphics.hpp>
#include <iostream>
#include "TextButton.h"
#include <vector>
#include <cmath>

using namespace std;

const float TEXT_X = 10;		// x coordinate of text buttons
const float TEXT_HEIGHT = 60;	// height of each row of text button
const float TEXT_WIDTH = 300;	// width of text button panel
const float WINDOW_WIDTH = 1200; // window width
const float WINDOW_HEIGHT = 800; // window height
const float FRACTAL_WIDTH = 250;	// width of a fractal
const float FRACTAL_HEIGHT = 250;	// height of a fractal
const float FRACTAL_LEVEL = 5;		// level of a fractal
const sf::Color LINK_COLOR = sf::Color::White;		// color of text link
const sf::Color HOVER_COLOR = sf::Color::Yellow;	// color of mouse-over link
const sf::Color ACTIVE_COLOR = sf::Color::Blue;		// color of active text link 

enum TextButtonType{CLEAR, FRACTAL1, FRACTAL2, FRACTAL3, FRACTAL4};

vector<sf::Shape*> generateBoxFractal(float x, float y, float width, float height, int level, sf::Color color);

vector<sf::Shape*> generateVicsekFractal(float x, float y, float width, float height, int level, sf::Color color);

vector<sf::Shape*> generatePolyhedronFractal(float x, float y, float width, float length, int level, sf::Color color);

int main()
{
	// create the window
	sf::RenderWindow window(sf::VideoMode(1200, 800), "CSCI 120 - Fractals");

	// set up text buttons and white drawing area
	TextButton clearButton("Clear", 40, LINK_COLOR, TEXT_X, TEXT_HEIGHT);
	TextButton fractal1Button("Box Fractal", 40, ACTIVE_COLOR, TEXT_X, TEXT_HEIGHT * 2);
	TextButton fractal2Button("Fractal 1", 40, LINK_COLOR, TEXT_X, TEXT_HEIGHT * 3);
	TextButton fractal3Button("Fractal 2", 40, LINK_COLOR, TEXT_X, TEXT_HEIGHT * 4);
	TextButton fractal4Button("Fractal 3", 40, LINK_COLOR, TEXT_X, TEXT_HEIGHT * 5);
	TextButton colorButton("Current Color:", 20, LINK_COLOR, TEXT_X, TEXT_HEIGHT * 6.5);
	sf::RectangleShape drawingArea(sf::Vector2f(WINDOW_WIDTH - TEXT_WIDTH - 5, WINDOW_HEIGHT- 10));
	drawingArea.setPosition(TEXT_WIDTH, 5);
	drawingArea.setFillColor(sf::Color::White);
	TextButtonType activeButton = FRACTAL1; // active text button (which tool is currently used)

	// set up color palette 
	sf::Image colorImage; // creates an image object
	if (!colorImage.loadFromFile("images/color-palette.png")) {    // loads the image file into the object 
		cerr << "Couldn't open image file!" << endl;
		return EXIT_FAILURE;
	}
	sf::Texture texture;
	texture.loadFromImage(colorImage);
	sf::Sprite colorPaletteSprite;		// sprite for color palette
	colorPaletteSprite.setTexture(texture);
	colorPaletteSprite.setPosition(sf::Vector2f(TEXT_X, TEXT_HEIGHT * 8));

	sf::Color currentColor = sf::Color::Red;	// current drawing color

	sf::RectangleShape colorRectangle(sf::Vector2f(50, 50)); // rectangle displaying the currently selected color
	colorRectangle.setFillColor(currentColor);
	colorRectangle.setOutlineThickness(1);
	colorRectangle.setOutlineColor(sf::Color::White);
	colorRectangle.setPosition(TEXT_X, TEXT_HEIGHT * 7);

	vector<sf::Shape*> shapeVector; // vector containing pointers to shapes to be drawn

	// run the program as long as the window is open
	while (window.isOpen())
	{
		// check all the window's events that were triggered since the last iteration of the loop
		sf::Event event;
		while (window.pollEvent(event))
		{
			
			if (event.type == sf::Event::Closed) // "close requested" event: we close the window
				window.close();
			else if (event.type == sf::Event::MouseMoved) { // mouse moved event
				// mouse over effect for text buttons
				if (clearButton.contains(event.mouseMove.x, event.mouseMove.y)) {
					clearButton.setTextColor(HOVER_COLOR);
				}
				else
					clearButton.setTextColor(LINK_COLOR);

				if (fractal1Button.contains(event.mouseMove.x, event.mouseMove.y)) {
					fractal1Button.setTextColor(HOVER_COLOR);
				}
				else {
					if (activeButton == FRACTAL1)
						fractal1Button.setTextColor(ACTIVE_COLOR);
					else
						fractal1Button.setTextColor(LINK_COLOR);
				}
				if (fractal2Button.contains(event.mouseMove.x, event.mouseMove.y)) {
					fractal2Button.setTextColor(HOVER_COLOR);
				}
				else {
					if (activeButton == FRACTAL2)
						fractal2Button.setTextColor(ACTIVE_COLOR);
					else
						fractal2Button.setTextColor(LINK_COLOR);
				}
				if (fractal3Button.contains(event.mouseMove.x, event.mouseMove.y)) {
					fractal3Button.setTextColor(HOVER_COLOR);
				}
				else {
					if (activeButton == FRACTAL3)
						fractal3Button.setTextColor(ACTIVE_COLOR);
					else
						fractal3Button.setTextColor(LINK_COLOR);
				}
				if (fractal4Button.contains(event.mouseMove.x, event.mouseMove.y)) {
					fractal4Button.setTextColor(HOVER_COLOR);
				}
				else {
					if (activeButton == FRACTAL4)
						fractal4Button.setTextColor(ACTIVE_COLOR);
					else
						fractal4Button.setTextColor(LINK_COLOR);
				}
			}
			else if (event.type == sf::Event::MouseButtonPressed) { 
				if (event.mouseButton.button == sf::Mouse::Left &&  // clear button is clicked
					clearButton.contains(event.mouseButton.x, event.mouseButton.y)) {
					shapeVector.clear(); // clear shape vector
				}
				else if (event.mouseButton.button == sf::Mouse::Left &&  // fractal 1 button is clicked
					fractal1Button.contains(event.mouseButton.x, event.mouseButton.y)) {
					activeButton = FRACTAL1;
					fractal1Button.setTextColor(ACTIVE_COLOR); // change text color to indicate that this fractal type is selected
				}
				else if (event.mouseButton.button == sf::Mouse::Left &&  // fractal 2 button is clicked
					fractal2Button.contains(event.mouseButton.x, event.mouseButton.y)) {
					activeButton = FRACTAL2;
					fractal2Button.setTextColor(ACTIVE_COLOR); // change text color to indicate that this fractal type is selected
				}
				else if (event.mouseButton.button == sf::Mouse::Left &&  // fractal 3 button is clicked
					fractal3Button.contains(event.mouseButton.x, event.mouseButton.y)) {
					activeButton = FRACTAL3;
					fractal3Button.setTextColor(ACTIVE_COLOR); // change text color to indicate that this fractal type is selected
				}
				else if (event.mouseButton.button == sf::Mouse::Left &&  // fractal 4 button is clicked
					fractal4Button.contains(event.mouseButton.x, event.mouseButton.y)) {
					activeButton = FRACTAL4;
					fractal4Button.setTextColor(ACTIVE_COLOR); // change text color to indicate that this fractal type is selected
				}
				else if (event.mouseButton.button == sf::Mouse::Left &&  // drawing area is clicked
					drawingArea.getGlobalBounds().contains(event.mouseButton.x, event.mouseButton.y)) {
					if (activeButton == FRACTAL1) { // create box fractal
						vector<sf::Shape*> vec1 = generateBoxFractal(event.mouseButton.x, event.mouseButton.y,
							FRACTAL_WIDTH, FRACTAL_HEIGHT, FRACTAL_LEVEL, currentColor);
						shapeVector.insert(shapeVector.end(), vec1.begin(), vec1.end());
					}
					else if (activeButton == FRACTAL2) { 
						cout << "TODO: DRAW FRACTAL TYPE 1\n";
						/** TODO: Call recursive function to create fractal **/
						vector<sf::Shape*> vec1 = generateVicsekFractal(event.mouseButton.x, event.mouseButton.y,
							FRACTAL_WIDTH, FRACTAL_HEIGHT, FRACTAL_LEVEL, currentColor);
						shapeVector.insert(shapeVector.end(), vec1.begin(), vec1.end());
					}
					else if (activeButton == FRACTAL3) {
						cout << "TODO: DRAW FRACTAL TYPE 2\n";
						/** TODO: Call recursive function to create fractal **/
						vector<sf::Shape*> vec1 = generatePolyhedronFractal(event.mouseButton.x, event.mouseButton.y,
							125, 3, 10, currentColor);
						shapeVector.insert(shapeVector.end(), vec1.begin(), vec1.end());
					}
					else if (activeButton == FRACTAL4) {
						cout << "TODO: DRAW FRACTAL TYPE 3\n";
						/** TODO: Call recursive function to create fractal **/
					}
				}
				else if (event.mouseButton.button == sf::Mouse::Left &&  // color palette is clicked
					colorPaletteSprite.getGlobalBounds().contains(event.mouseButton.x, event.mouseButton.y)) {
					// get selected color from color palette and change the active drawing color
					currentColor = colorImage.getPixel(event.mouseButton.x - colorPaletteSprite.getPosition().x, 
						event.mouseButton.y - colorPaletteSprite.getPosition().y);
					colorRectangle.setFillColor(currentColor); // change the color rectangle to show the current color
				}
			}
		}

		// clear the window with black color
		window.clear(sf::Color::Black);

		// draw text buttons, color palette, and drawing area background
		window.draw(clearButton.getText());
		window.draw(fractal1Button.getText());
		window.draw(fractal2Button.getText());
		window.draw(fractal3Button.getText());
		window.draw(fractal4Button.getText());
		window.draw(colorButton.getText());
		window.draw(colorPaletteSprite);
		window.draw(colorRectangle);
		window.draw(drawingArea);

		// draw shapes
		for (int i = 0; i < shapeVector.size(); ++i) {
			window.draw(*shapeVector.at(i));
		}

		// end the current frame
		window.display();
	}

	return 0;
}

/**
 * Returns a vector containing pointers to Shape objects that create a box fractal of 
 * the given dimension, location, level, and color.
 * @param x			x-coordinate
 * @param y			y-coordinate
 * @param width		width in pixels
 * @param height	height in pixels
 * @param level		fractal level (nonnegative)
 * @param color		fill color
*/
vector<sf::Shape*> generateBoxFractal(float x, float y, float width, float height, int level, sf::Color color) {
	vector<sf::Shape*> vec;
	if (level <= 0) { // base case
		// create a rectangle of the given dimensions, position, and fill color
		sf::RectangleShape* rect = new sf::RectangleShape(sf::Vector2f(width, height));
		rect->setPosition(x, y);
		rect->setFillColor(color);
		vec.push_back(rect);
		return vec;
	}
	else { // recursive case
		float w = width / 3; // width of fractal of the next lower level
		float h = height / 3; // height of fractal of the next lower level
		// use recursive calls to create five fractals of the next lower level 
		//  at top-left, top-right, center, bottom-left, bottom, right
		// all the vectors returned by the recursive calls are merged into one vector
		vector<sf::Shape*> vec1 = generateBoxFractal(x, y, w, h, level - 1, color);
		vec.insert(vec.end(), vec1.begin(), vec1.end());
		vector<sf::Shape*> vec2 = generateBoxFractal(x + 2 * w, y, w, h, level - 1, color);
		vec.insert(vec.end(), vec2.begin(), vec2.end());
		vector<sf::Shape*> vec3 = generateBoxFractal(x + w, y + h, w, h, level - 1, color);
		vec.insert(vec.end(), vec3.begin(), vec3.end());
		vector<sf::Shape*> vec4 = generateBoxFractal(x, y + 2 * h, w, h, level - 1, color);
		vec.insert(vec.end(), vec4.begin(), vec4.end());
		vector<sf::Shape*> vec5 = generateBoxFractal(x + 2 * w, y + 2 * h, w, h, level - 1, color);
		vec.insert(vec.end(), vec5.begin(), vec5.end());
	}

	return vec;
}

vector<sf::Shape*> generateVicsekFractal(float x, float y, float width, float height, int level, sf::Color color) {
	vector<sf::Shape*> vec;
	if (level <= 0) { // base case
					  // create a rectangle of the given dimensions, position, and fill color
		sf::RectangleShape* rect = new sf::RectangleShape(sf::Vector2f(width, height));
		rect->setPosition(x, y);
		rect->setFillColor(color);
		vec.push_back(rect);
		return vec;
	}
	else { // recursive case
		float w = width / 3; // width of fractal of the next lower level
		float h = height / 3; // height of fractal of the next lower level
							  // use recursive calls to create five fractals of the next lower level 
							  //  at top-mid, mid-right, center, bottom-mid, mid-left
							  // all the vectors returned by the recursive calls are merged into one vector
		vector<sf::Shape*> vec1 = generateVicsekFractal(x + w, y, w, h, level - 1, color);
		vec.insert(vec.end(), vec1.begin(), vec1.end());
		vector<sf::Shape*> vec2 = generateVicsekFractal(x + 2 * w, y + h, w, h, level - 1, color);
		vec.insert(vec.end(), vec2.begin(), vec2.end());
		vector<sf::Shape*> vec3 = generateVicsekFractal(x + w, y + h, w, h, level - 1, color);
		vec.insert(vec.end(), vec3.begin(), vec3.end());
		vector<sf::Shape*> vec4 = generateVicsekFractal(x + w, y + 2 * h, w, h, level - 1, color);
		vec.insert(vec.end(), vec4.begin(), vec4.end());
		vector<sf::Shape*> vec5 = generateVicsekFractal(x, y + h, w, h, level - 1, color);
		vec.insert(vec.end(), vec5.begin(), vec5.end());
	}

	return vec;
}

vector<sf::Shape*> generatePolyhedronFractal(float x, float y, float triRad, float numVert, int level, sf::Color color) {
	vector<sf::Shape*> vec;

	int triangleRadius = triRad;
	//base case for modified Serpenski Triangle
	if (level <= 0) {
		sf::CircleShape* triangle1 = new sf::CircleShape(triRad, 3);
		triangle1->setPosition(x, y);
		triangle1->setOutlineThickness(1);
		triangle1->setOutlineColor(sf::Color::Red);
		vec.push_back(triangle1);

		/*sf::CircleShape* triangle2 = new sf::CircleShape(triangleRadius, 3);
		triangle2->setPosition(x + width, y + height);
		triangle2->rotate(180);
		triangle2->setOutlineThickness(1);
		triangle2->setOutlineColor(color);
		vec.push_back(triangle2);
		*/
	}

	//recursive cases for modified serpenski triangle
	else {
		float w = triRad / 2;
		float h = 3;

		vector<sf::Shape*> vec1 = generatePolyhedronFractal(x, y, w, h, level - 1, color);
		vec.insert(vec.end(), vec1.begin(), vec1.end());
		vector<sf::Shape*> vec2 = generatePolyhedronFractal(x + triRad, y, w, h, level - 1, color);
		vec.insert(vec.end(), vec2.begin(), vec2.end());
		vector<sf::Shape*> vec3 = generatePolyhedronFractal(x + 2 * triRad, y + 2 * triRad, w, h, level - 1, color);
		vec.insert(vec.end(), vec3.begin(), vec3.end());
	}
	
	

	/*if (level <= 0) {	//base case
		sf::RectangleShape* line1 = new sf::RectangleShape(sf::Vector2f(lineThickness, height));
		line1->setPosition(x, y);
		line1->setFillColor(color);
		vec.push_back(line1);

		sf::RectangleShape* line2 = new sf::RectangleShape(sf::Vector2f(lineThickness, height));
		line2->setPosition(x, y);
		line2->rotate(270);
		line2->setFillColor(color);
		vec.push_back(line2);

		sf::RectangleShape* line3 = new sf::RectangleShape(sf::Vector2f(lineThickness, sqrt(pow(height, 2) + pow(width, 2))));
		line3->setPosition(x, y);
		line3->rotate(-44);
		line3->setFillColor(color);
		vec.push_back(line3);

		sf::RectangleShape* line4 = new sf::RectangleShape(sf::Vector2f(lineThickness, height));
		line4->setPosition(x + width, y + height);
		line4->rotate(180);
		line4->setFillColor(color);
		vec.push_back(line4);

		sf::RectangleShape* line5 = new sf::RectangleShape(sf::Vector2f(lineThickness, height));
		line5->setPosition(x + width, y + height);
		line5->rotate(90);
		line5->setFillColor(color);
		vec.push_back(line5);

		sf::RectangleShape* line6 = new sf::RectangleShape(sf::Vector2f(lineThickness, sqrt(pow(height, 2) + pow(width, 2))));
		line6->setPosition(x, y + height);
		line6->rotate(225);
		line6->setFillColor(color);
		vec.push_back(line6);
		
	}

	else {	//recursive case
		float w = width / 3;
		float h = height / 3;

		vector<sf::Shape*> vec1 = generatePolyhedronFractal(x, y, w, h, level - 1, color);
		vec.insert(vec.end(), vec1.begin(), vec1.end());
		vector<sf::Shape*> vec2 = generatePolyhedronFractal(x + w, y, w, h, level - 1, color);
		vec.insert(vec.end(), vec2.begin(), vec2.end());
		vector<sf::Shape*> vec3 = generatePolyhedronFractal(x + w, y + h, w, h, level - 1, color);
		vec.insert(vec.end(), vec3.begin(), vec3.end());
		vector<sf::Shape*> vec4 = generatePolyhedronFractal(x, y + h, w, h, level - 1, color);
		vec.insert(vec.end(), vec4.begin(), vec4.end());
		vector<sf::Shape*> vec5 = generatePolyhedronFractal(x + w, y + h, w, h, level - 1, color);
		vec.insert(vec.end(), vec5.begin(), vec5.end());
	}
	*/

	return vec;
}
