
#include "stdafx.h"
#include <iostream>
#include <string>

using namespace std;

class Appointment {
public:
	Appointment() {}
	Appointment(int y, int m, int d) {
		year = y;
		month = m;
		day = d;
	}

	int startDateAdder(int y, int m, int d) {
		start = (y * 365) + (m * 30) + d;
		return start;
	}

	virtual bool hasFutureAppointmentOn() {
		if (start < future) {

		}
		return true;
	}

	int futureDateAdder(int y, int m, int d) {
		future = (y * 365) + (m * 30) + d;
		return future;
	}

	void setDescription(string d) {
		description = d;

	}

	string getDescription() {
		return description;
	}

protected:
	string description;
	int start;
	int future;
	int year;
	int month;
	int day;
};

class Dailyappointment : public Appointment {

public:
	//check if it returns true
	bool hasFutureAppointmentOn() {
		if (start < future) {
			cout << "There is a daily appointment.\n";
		}
		return true;
	}


private:


};

class Monthlyappointment : public Appointment {

public:
	//check if it returns true
	bool hasFutureAppointmentOn() {
		if ((start < future) && (day == day)) {
			cout << "There is a monthly appointment.\n";
		}
		return true;
	}

};

class Yearlyappointment : public Appointment {

public:
	// check if it returns true 
	virtual bool hasFutureAppointmentOn() {
		if ((start < future) && (day == day) && (month == month)) {
			cout << "There is a yearly appointment.\n";
		}
		return true;
	}
};



int main()
{
	Appointment appointment;
	string appointmentDescription;
	cout << "What is your appointment called? ";
	getline(cin, appointmentDescription);

	appointment.startDateAdder(2018, 2, 28);
	appointment.futureDateAdder(2018, 3, 14);

	cout << appointment.startDateAdder << " vs " << appointment.futureDateAdder << endl;

	appointment.hasFutureAppointmentOn();
	appointment.setDescription(appointmentDescription);

	cout << appointment.getDescription();

	Dailyappointment dailyCheck;
	dailyCheck.hasFutureAppointmentOn();

	return 0;
}
