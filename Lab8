// ConsoleApplication1.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include <iostream>
#include <string>
#include <vector>

using namespace std;

class Appointment {
public:
	Appointment() {}
	Appointment(int y, int m, int d) {
		year = y;
		month = m;
		day = d;
	}

	int startDateAdder(int y, int m, int d) {
		start = (y * 365) + (m * 30) + d;
		day = d;
		month = m;
		year = y;
		return start;
	}

	virtual bool hasFutureAppointmentOn(int y, int m, int d) {
		if (start < future) {
			cout << "There is an appointment.\n";
		}
		return true;
	}

	int futureDateAdder(int y, int m, int d) {
		future = (y * 365) + (m * 30) + d;
		return future;
	}

	void setDescription(string d) {
		description = d;

	}

	string getDescription() {
		return description;
	}

protected:
	string description;
	int start;
	int future;
	int year;
	int month;
	int day;
};

class Dailyappointment : public Appointment {

public:
	//check if it returns true

	Dailyappointment() : Appointment() {};
	Dailyappointment(int y, int m, int d) : Appointment(y, m, d) {};

	bool hasFutureAppointmentOn(int y, int m, int d) {
		futureDateAdder(y, m, d);
		if (start < future) {
			cout << "There is a daily appointment.\n";
			return true;
		}
		else {
			cout << start << " " << future << endl;
			cout << "This is broken.\n";
			return false;
		}
		
	}


private:


};

class Monthlyappointment : public Appointment {

public:
	//check if it returns true

	Monthlyappointment() : Appointment() {};
	Monthlyappointment(int y, int m, int d) : Appointment(y, m, d) {};

	bool hasFutureAppointmentOn(int y, int m, int d) {
		futureDateAdder(y, m, d); 
		if ((start < future) && (d == day)) {
			cout << "There is a monthly appointment.\n";
			return true;
		}
		else {
			
			cout << "There is not a monthly appointment.\n";
			cout << d << " " << day << endl;
			cout << start << " " << future << endl;
			return false;
		}
		
	}

};

class Yearlyappointment : public Appointment {

public:
	// check if it returns true 
	Yearlyappointment() : Appointment() {};
	Yearlyappointment(int y, int m, int d) : Appointment(y, m, d) {};

	virtual bool hasFutureAppointmentOn(int y, int m, int d) {
		futureDateAdder(y, m, d);
		if ((start < future) && (d == day) && (m == month)) {
			cout << "There is a yearly appointment.\n";
			return true;
		}
		else {
			cout << "There is not a yearly appointment.\n";
			return false;
		}
		
	}
};



int main()
{
	//Appointment appointment;
	string appointmentDescription;
	Dailyappointment dailyCheck;
	Monthlyappointment monthlyCheck;
	Yearlyappointment yearlyCheck;

	cout << "What is your Daily appointment called? ";
	getline(cin, appointmentDescription);

	//appointment.startDateAdder(2018, 2, 28);
	//appointment.futureDateAdder(2018, 3, 14);

	//appointment.setDescription(appointmentDescription);
	dailyCheck.setDescription(appointmentDescription);
	cout << dailyCheck.getDescription() << endl << endl;

	cout << "What is your Monthly appointment called? ";
	getline(cin, appointmentDescription);

	monthlyCheck.setDescription(appointmentDescription);
	cout << monthlyCheck.getDescription() << endl << endl;

	cout << "What is your Yearly appointment called? ";
	getline(cin, appointmentDescription);

	yearlyCheck.setDescription(appointmentDescription);
	cout << yearlyCheck.getDescription() << endl << endl;

	
	dailyCheck.startDateAdder(2018, 2, 28);
	
	monthlyCheck.startDateAdder(2017, 5, 14);
	
	yearlyCheck.startDateAdder(2016, 3, 14);
	
	vector<Appointment*> List;

	List.push_back(&dailyCheck);
	List.push_back(&monthlyCheck);
	List.push_back(&yearlyCheck);

	for (int i = 0; i < List.size(); i++)
	{
		cout << List.at(i)->getDescription() << endl;
		List.at(i)->hasFutureAppointmentOn(2018, 3, 14);
		
	}

	return 0;
}
 
